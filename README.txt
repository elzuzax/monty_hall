This simple Java program demonstrates the Monty Hall problem in action. The problem is as follows: a game show contestant is presented 3 doors from which to choose. Behind one random door is a new car. Behind the other two doors lurks a goat. The contestant, being the non-shepherd he is, wants the car. 

The contestant picks a door, and with 1/3 (or 33%) probability has selected the door with a car. The host, who knows what is behind each door and does NOT yet open the door that has been selected, then opens one of the non-selected doors that contains a goat. The contestant is then given an opportunity to switch doors (again, the originally-selected door is still closed). 

Naive intuition tells most people that there is no incentive to switch doors; with one goat-containing door already opened, it seems reasonable that there is a 50% chance of winning the car, whether the contestant remains at the original door or switches to the other (closed) door. However, it is in the best interest of the contestant to switch doors. Doing so raises the probability of winning the car to 2/3 (or 66%). The reason is that GIVEN THAT a goat was initially chosen with 33% probability, the host is telling the contestant which other door DEFINITELY contains a goat (with certainty, by opening the door). 

This is a statistical brain teaser that I took an interest in after a Stats class in college. I could not swallow the fact that changing doors made a difference and designed this simulator to convince myself. It works by running several iterations (count is specified by user) to get a running average of the number of wins. The user has the option to switch doors, or not switch doors, which is constant throughout all iterations. At the start of each iteration, the car and goats are assigned to new, random doors, and a door is selected at random on behalf of the user (the contestant). The program demonstrates the Law of Large Numbers, in that a few runs will be very roughly "in the neighborhood" of a 33% or 66% (depending on whether a switch is made) win ratio. The more iterations are run, the closer the average comes to *precisely* those values.
